import { CoreMessage, LanguageModel, streamText } from 'ai';
import { getModel }from '../utils';
import { LocationResponse } from '../types/custom';

// A specialized prompt instructing the LLM to parse a textual response
// and extract structured GeoJSON data and map commands.
const GEOJSON_ENRICHMENT_PROMPT = `
You are an AI assistant specializing in geospatial data extraction.
Your task is to process a given text and extract the following information:

1.  "text": The original textual response that should be displayed to the user.
2.  "geojson": A valid GeoJSON FeatureCollection representing any locations, addresses, coordinates, or routes mentioned in the text.
3.  "map_commands": A list of map camera commands to control the map view, such as flying to a location.

Rules for GeoJSON:
- Convert all found locations into appropriate GeoJSON features (Point, LineString).
- Use the correct coordinate format: [Longitude, Latitude] in WGS84.
- Include meaningful properties for each feature (e.g., "name", "description").
- If no geographic data can be extracted, set "geojson" to null.

Rules for Map Commands:
- Identify actions in the text that imply map movements (e.g., "fly to," "center on," "zoom to").
- Create a list of command objects, for example: { "command": "flyTo", "params": { "center": [-71.05633, 42.356823], "zoom": 15 } }.
- If no map commands can be inferred, set "map_commands" to null.

The final output MUST be a single JSON object that strictly follows the LocationResponse interface.

Here is the text to process:
`;

/**
 * An asynchronous agent that enriches a textual response with GeoJSON data and map commands.
 * @param researcherResponse The text generated by the researcher agent.
 * @returns A promise that resolves to a LocationResponse object.
 */
export async function geojsonEnricher(
  researcherResponse: string
): Promise<LocationResponse> {
  const model = getModel() as LanguageModel;
  const messages: CoreMessage[] = [
    {
      role: 'user',
      content: `${GEOJSON_ENRICHMENT_PROMPT}\n\n${researcherResponse}`,
    },
  ];

  try {
    const { text } = await streamText({
      model,
      messages,
      maxTokens: 2048,
    });

    // Assuming the LLM returns a valid JSON string, parse it.
    const enrichedData = JSON.parse(text) as LocationResponse;
    return enrichedData;
  } catch (error) {
    console.error('Error enriching response with GeoJSON:', error);
    // If parsing fails, return a default response that includes the original text.
    return {
      text: researcherResponse,
      geojson: null,
      map_commands: null,
    };
  }
}